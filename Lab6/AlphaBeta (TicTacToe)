import math

# ----- Constants -----
PLAYER = "X"   # Human player
AI = "O"       # Computer player

# ----- Helper Functions -----
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

def check_winner(board):
    """Check if there's a winner."""
    # Rows and columns
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != " ":
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != " ":
            return board[0][i]
    # Diagonals
    if board[0][0] == board[1][1] == board[2][2] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return board[0][2]
    return None

def is_full(board):
    return all(board[i][j] != " " for i in range(3) for j in range(3))

# ----- Minimax with Alpha-Beta Pruning -----
def minimax(board, depth, alpha, beta, is_maximizing):
    winner = check_winner(board)
    if winner == AI:
        return 1
    elif winner == PLAYER:
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for (i, j) in available_moves(board):
            board[i][j] = AI
            eval = minimax(board, depth + 1, alpha, beta, False)
            board[i][j] = " "
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  # Î² cutoff
        return max_eval
    else:
        min_eval = math.inf
        for (i, j) in available_moves(board):
            board[i][j] = PLAYER
            eval = minimax(board, depth + 1, alpha, beta, True)
            board[i][j] = " "
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  # Î± cutoff
        return min_eval

def best_move(board):
    """Find the best move for the AI using minimax with alpha-beta pruning."""
    best_val = -math.inf
    move = None
    for (i, j) in available_moves(board):
        board[i][j] = AI
        move_val = minimax(board, 0, -math.inf, math.inf, False)
        board[i][j] = " "
        if move_val > best_val:
            best_val = move_val
            move = (i, j)
    return move

# ----- Game Loop -----
def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic Tac Toe! You are X, AI is O.")
    print_board(board)

    while True:
        # Player move
        try:
            row = int(input("Enter row (0-2): "))
            col = int(input("Enter col (0-2): "))
        except ValueError:
            print("Please enter numbers 0-2.")
            continue

        if row not in range(3) or col not in range(3):
            print("Invalid input. Try again.")
            continue
        if board[row][col] != " ":
            print("Cell already taken, try again.")
            continue

        board[row][col] = PLAYER
        print_board(board)

        if check_winner(board) == PLAYER:
            print("ðŸŽ‰ You win!")
            break
        if is_full(board):
            print("It's a draw!")
            break

        # AI move
        print("AI is making a move...")
        move = best_move(board)
        if move:
            board[move[0]][move[1]] = AI
        print_board(board)

        if check_winner(board) == AI:
            print("ðŸ’» AI wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break

# Run the game
if __name__ == "__main__":
    play_game()
