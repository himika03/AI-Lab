import math

# ----- Game setup -----
PLAYER = "X"  # Human
AI = "O"      # Computer

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def available_moves(board):
    """Return list of available (row, col) moves."""
    moves = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                moves.append((i, j))
    return moves

def check_winner(board):
    """Return 'X' if X wins, 'O' if O wins, or None otherwise."""
    # Rows & Columns
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != " ":
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != " ":
            return board[0][i]
    # Diagonals
    if board[0][0] == board[1][1] == board[2][2] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return board[0][2]
    return None

def is_full(board):
    return all(cell != " " for row in board for cell in row)

# ----- Minimax Algorithm -----
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == AI:
        return 1
    elif winner == PLAYER:
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for (i, j) in available_moves(board):
            board[i][j] = AI
            score = minimax(board, depth + 1, False)
            board[i][j] = " "
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for (i, j) in available_moves(board):
            board[i][j] = PLAYER
            score = minimax(board, depth + 1, True)
            board[i][j] = " "
            best_score = min(score, best_score)
        return best_score

def best_move(board):
    """Find the best move for the AI."""
    best_score = -math.inf
    move = None
    for (i, j) in available_moves(board):
        board[i][j] = AI
        score = minimax(board, 0, False)
        board[i][j] = " "
        if score > best_score:
            best_score = score
            move = (i, j)
    return move

# ----- Game Loop -----
def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Tic Tac Toe - You are X, AI is O")
    print_board(board)

    while True:
        # Player move
        row = int(input("Enter row (0-2): "))
        col = int(input("Enter col (0-2): "))
        if board[row][col] != " ":
            print("Cell taken, try again.")
            continue
        board[row][col] = PLAYER

        if check_winner(board) == PLAYER:
            print_board(board)
            print("You win!")
            break
        elif is_full(board):
            print_board(board)
            print("It's a draw!")
            break

        # AI move
        print("AI is making a move...")
        move = best_move(board)
        if move:
            board[move[0]][move[1]] = AI

        print_board(board)

        if check_winner(board) == AI:
            print("AI wins!")
            break
        elif is_full(board):
            print("It's a draw!")
            break

# Run the game
if __name__ == "__main__":
    play_game()
